{"ast":null,"code":"var _jsxFileName = \"/home/alexandreuser/react-projects/github-api/src/providers/github-provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useCallback } from 'react';\nimport api from '../services/api';\nimport avatar from '../assets/img/git.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [githubState, setGithubState] = useState({\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      avatar_url: avatar,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      public_gists: 0,\n      public_repos: 0\n    },\n    repositories: [],\n    starred: []\n  });\n\n  const getUser = username => {\n    api.get(`users/${username}`).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      setGithubState(prevState => ({ ...prevState,\n        loading: !prevState.loading,\n        user: {\n          login: data.login,\n          name: data.name,\n          avatar_url: data.avatar_url,\n          html_url: data.html_url,\n          blog: data.blog,\n          company: data.company,\n          location: data.location,\n          followers: data.followers,\n          following: data.following,\n          public_gists: data.public_gists,\n          public_repos: data.public_repos\n        }\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState,\n    getUser: useCallback(username => getUser(username), [])\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubProvider, \"GTnyewE7+Sldk8NY6e2IIT7ANkk=\");\n\n_c = GithubProvider;\nexport default GithubProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"names":["React","useState","createContext","useCallback","api","avatar","GithubContext","loading","user","repositories","starred","GithubProvider","children","githubState","setGithubState","login","undefined","name","avatar_url","html_url","blog","company","location","followers","following","public_gists","public_repos","getUser","username","get","then","data","prevState","contextValue"],"sources":["/home/alexandreuser/react-projects/github-api/src/providers/github-provider.js"],"sourcesContent":["import React, { useState, createContext, useCallback } from 'react'\nimport api from '../services/api';\nimport avatar from '../assets/img/git.png';\n\nexport const GithubContext = createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: [],\n})\n\nconst GithubProvider = ({children}) => {\n\n  const [ githubState, setGithubState ] = useState({\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      avatar_url: avatar,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      public_gists: 0,\n      public_repos: 0,\n    },\n    repositories: [],\n    starred: [],\n  });\n\nconst getUser = (username) => {\n  api.get(`users/${username}`).then(({ data }) => {\n    setGithubState((prevState) => ({\n    ...prevState,\n    loading: !prevState.loading,\n    user: {\n      login: data.login,\n      name: data.name,\n      avatar_url: data.avatar_url,\n      html_url: data.html_url,\n      blog: data.blog,\n      company: data.company,\n      location: data.location,\n      followers: data.followers,\n      following: data.following,\n      public_gists: data.public_gists,\n      public_repos: data.public_repos,\n    },\n    }));\n  })\n};\n\n\n  const contextValue = {\n    githubState,\n    getUser: useCallback((username) => getUser(username), [])\n  }\n\n  return (\n    <GithubContext.Provider value={contextValue}>\n      {children}\n    </GithubContext.Provider>\n  )\n};\n\nexport default GithubProvider;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,WAAzC,QAA4D,OAA5D;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAC;EACzCK,OAAO,EAAE,KADgC;EAEzCC,IAAI,EAAE,EAFmC;EAGzCC,YAAY,EAAE,EAH2B;EAIzCC,OAAO,EAAE;AAJgC,CAAD,CAAnC;;AAOP,MAAMC,cAAc,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EAErC,MAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkCb,QAAQ,CAAC;IAC/CM,OAAO,EAAE,KADsC;IAE/CC,IAAI,EAAE;MACJO,KAAK,EAAEC,SADH;MAEJC,IAAI,EAAED,SAFF;MAGJE,UAAU,EAAEb,MAHR;MAIJc,QAAQ,EAAEH,SAJN;MAKJI,IAAI,EAAEJ,SALF;MAMJK,OAAO,EAAEL,SANL;MAOJM,QAAQ,EAAEN,SAPN;MAQJO,SAAS,EAAE,CARP;MASJC,SAAS,EAAE,CATP;MAUJC,YAAY,EAAE,CAVV;MAWJC,YAAY,EAAE;IAXV,CAFyC;IAe/CjB,YAAY,EAAE,EAfiC;IAgB/CC,OAAO,EAAE;EAhBsC,CAAD,CAAhD;;EAmBF,MAAMiB,OAAO,GAAIC,QAAD,IAAc;IAC5BxB,GAAG,CAACyB,GAAJ,CAAS,SAAQD,QAAS,EAA1B,EAA6BE,IAA7B,CAAkC,SAAc;MAAA,IAAb;QAAEC;MAAF,CAAa;MAC9CjB,cAAc,CAAEkB,SAAD,KAAgB,EAC/B,GAAGA,SAD4B;QAE/BzB,OAAO,EAAE,CAACyB,SAAS,CAACzB,OAFW;QAG/BC,IAAI,EAAE;UACJO,KAAK,EAAEgB,IAAI,CAAChB,KADR;UAEJE,IAAI,EAAEc,IAAI,CAACd,IAFP;UAGJC,UAAU,EAAEa,IAAI,CAACb,UAHb;UAIJC,QAAQ,EAAEY,IAAI,CAACZ,QAJX;UAKJC,IAAI,EAAEW,IAAI,CAACX,IALP;UAMJC,OAAO,EAAEU,IAAI,CAACV,OANV;UAOJC,QAAQ,EAAES,IAAI,CAACT,QAPX;UAQJC,SAAS,EAAEQ,IAAI,CAACR,SARZ;UASJC,SAAS,EAAEO,IAAI,CAACP,SATZ;UAUJC,YAAY,EAAEM,IAAI,CAACN,YAVf;UAWJC,YAAY,EAAEK,IAAI,CAACL;QAXf;MAHyB,CAAhB,CAAD,CAAd;IAiBD,CAlBD;EAmBD,CApBD;;EAuBE,MAAMO,YAAY,GAAG;IACnBpB,WADmB;IAEnBc,OAAO,EAAExB,WAAW,CAAEyB,QAAD,IAAcD,OAAO,CAACC,QAAD,CAAtB,EAAkC,EAAlC;EAFD,CAArB;EAKA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAEK,YAA/B;IAAA,UACGrB;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAtDD;;GAAMD,c;;KAAAA,c;AAwDN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}